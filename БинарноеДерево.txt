#include <iostream>
#include <string>
#include "BinaryTree.h"


using namespace std;


void Print(BinaryTreeNode* node, int counter)
{
    if (node != nullptr)
    {
        Print(node->Right, counter + 1);
        cout << string(counter, '\t') << node->Data << endl;
        Print(node->Left, counter + 1);
    }
    else
    {
        cout << string(counter, '\t') << '_' << endl;
    }
}




int main()
{
    setlocale(LC_ALL, "Russian");

    BinaryTree* binaryTree = new BinaryTree();
    int counter = 0;
    int comanda;
    do
    {
        cout << "\n\n\nДоступные комманды:\n1 - Создание дерева\n2 - Добавление элемента\n3 - Удаление элемента\n4 - Поиск элемента ";
        cout << "\n5 - Поиск минимума дерева\n6 - Поиск максимума дерева\n0 - Завершение работы программы";
        cout << "\n\nВведите номер команды:";
        cin >> comanda;

        switch (comanda)
        {
        case 1:
        {
            cout << "\nВведите количество элементов: ";
            int size;
            cin >> size;

            for (int i = 0; i < size; i++)
            {
                cout << "\nВведите элемент для добавления: ";
                int element;
                cin>> element;
                int report = 0;
                report = AddElement(binaryTree, element);
                if (report == 0)
                {
                    cout << "\nДобавление успешно завершено.\n";
                }
                else
                {
                    cout << "\nДобавление невозможно.\n";
                    size += 1;
                }
            }



            Print(binaryTree->Root, counter);


            

            break;
        }
        case 2:
        {
            cout << "\nВведите элемент для добавления: ";
            int element;
            cin >> element;
            int report = 0;
            report = AddElement(binaryTree, element);
            if (report == 0)
            {
                cout << "\nДобавление завершено.\n";
            }
            else
            {
                cout << "\nДобавление невозможно.\n";
            }

            Print(binaryTree->Root, counter);

            break;
        }
        case 3:
        {
            cout << "\nВведите элемент для удаления: ";
            int element;
            cin >> element;
            int report = DeleteElement(binaryTree, element);
            if (report == 0)
            {
                cout << "\nЭлемент успешно удалён";
            }
            else
            {
                cout << "\nЭлемент не найден. Удаление невозможно.";
            }

            Print(binaryTree->Root, counter);

            break;

        }
        case 4:
        {
            cout << "\nВведите элемент для поиска: ";
            int element;
            cin >> element;
            int report;
            report = FindElement(binaryTree, element);
            if (report == 0)
            {
                cout << "\nЭлемент найден.\n";
            }
            else
            {
                cout << "\nЭлемент не найден.\n";
            }

            Print(binaryTree->Root, counter);

            break;
        }
        case 5:
        {
            int value;
            value = FindMinimum(binaryTree, 0);
            cout << "\nМинимум: " << value<<"\n";

            Print(binaryTree->Root, counter);

            break;
        }
        case 6:
        {
            int value;
            value = FindMaximum(binaryTree);
            cout << "\nМаксимум: " << value<<"\n";

            Print(binaryTree->Root, counter);

            break;
        }
        }
    } while (comanda != 0);
}


















BinaryTree.h
____________________________________________
#pragma once

/// <summary>
/// Структура элемента дерева
/// </summary>
struct BinaryTreeNode
{
	//TODO: XML
	int Data;
	BinaryTreeNode* Left = nullptr;
	BinaryTreeNode* Right = nullptr;
	BinaryTreeNode* Parent = nullptr;
};

/// <summary>
/// Структура, содержащая указатель на корень дерева
/// </summary>
struct BinaryTree
{
	//TODO: XML
	BinaryTreeNode* Root = nullptr;
	int Size = 0;
};





/// <summary>
/// Функция добавления элемента
/// </summary>
/// <param name="binaryTree">Дерево</param>
/// <param name="element">добавляемый элемент</param>
/// <returns>отчёт</returns>
int AddElement(BinaryTree* binaryTree,int element);
/// <summary>
/// Функция удаления элемента
/// </summary>
/// <param name="binaryTree">Дерево</param>
/// <param name="element">удаляемый элемент</param>
/// <returns>отчёт</returns>
int DeleteElement(BinaryTree* binaryTree, int element);
/// <summary>
/// Функция поиска элемента
/// </summary>
/// <param name="binaryTree">Дерево</param>
/// <param name="element">искомый элемент</param>
/// <returns>отчёт</returns>
int FindElement(BinaryTree* binaryTree, int element);
/// <summary>
/// Функция поиска минимального элемента
/// </summary>
/// <param name="binaryTree">Дерево</param>
/// <param name="operation">выполняемая операция</param>
/// <returns>отчёт</returns>
int FindMinimum(BinaryTree* binaryTree, int operation);
/// <summary>
/// Функция поиска максимума
/// </summary>
/// <param name="binaryTree">Дерево</param>
/// <returns>отчёт</returns>
int FindMaximum(BinaryTree* binaryTree);


























BinaryTree.cpp
_________________________________________________
#include "BinaryTree.h"
#include <iostream>

using namespace std;



int AddElement(BinaryTree* binaryTree, int element)
{
	
	if (binaryTree->Root == nullptr)
	{
		BinaryTreeNode* newNode = new BinaryTreeNode();
		newNode->Data = element;
		binaryTree->Root = newNode;
		binaryTree->Size += 1;
		return 0;
	}
	else 
	{
		if (binaryTree->Root->Data == element)
		{
			return 1;
		}
		BinaryTreeNode* comparisonNode = new BinaryTreeNode();
		comparisonNode = binaryTree->Root;
		//TODO: RSDN
		while (((comparisonNode->Left != nullptr) && (comparisonNode->Data >= element))
			||((comparisonNode->Right != nullptr) && (comparisonNode->Data <= element)))
		{
			if (comparisonNode->Data == element)
			{
				return 1;
			}
			if ((comparisonNode->Data > element)&&(comparisonNode->Left != nullptr))
			{
				comparisonNode = comparisonNode->Left;
			}
			if ((comparisonNode->Data < element)&&(comparisonNode->Right != nullptr))
			{
				comparisonNode = comparisonNode->Right;
			}
		}
		if (comparisonNode->Data == element)
		{
			return 1;
		}
		if (comparisonNode->Data > element)
		{
			BinaryTreeNode* newNode = new BinaryTreeNode();
			newNode->Parent = comparisonNode;
			newNode->Data = element;
			newNode->Parent->Left = newNode;
			binaryTree->Size += 1;

			return 0;
		}
		else
		{
			BinaryTreeNode* newNode = new BinaryTreeNode();
			newNode->Parent = comparisonNode;
			newNode->Data = element;
			newNode->Parent->Right = newNode;
			binaryTree->Size += 1;

			return 0;
		}
	}
	return 1;
}

int DeleteElement(BinaryTree* binaryTree, int element)
{

	BinaryTreeNode* comparisonNode = new BinaryTreeNode();
	comparisonNode = binaryTree->Root;
	int leftOrRight = 0;
	while (comparisonNode != nullptr)
	{
		if (comparisonNode->Data == element)
		{
			//Если есть только один узел
			if (comparisonNode->Parent == nullptr)
			{
				if (comparisonNode->Right != nullptr)
				{
					comparisonNode ->Data = FindMinimum(binaryTree, 1);
				}
				else
				{
					if (comparisonNode->Left != nullptr)
					{
						binaryTree->Root = comparisonNode->Left;
						comparisonNode->Left->Parent = nullptr;

					}
					else
					{
						binaryTree->Root = nullptr;
					}
				}


				binaryTree->Size -= 1;


				return 0;
			}
			else
			{
				//Если нету деток
				if ((comparisonNode->Left == nullptr) && (comparisonNode->Right == nullptr))
				{
					if (leftOrRight == 0)
					{
						comparisonNode->Parent->Left = nullptr;
						binaryTree->Size -= 1;
						return 0;
					}
					if (leftOrRight == 1)
					{
						comparisonNode->Parent->Right = nullptr;
						binaryTree->Size -= 1;
						return 0;
					}
				}
				//Если ребёнок справа
				if ((comparisonNode->Left == nullptr) && (comparisonNode->Right != nullptr))
				{
					if (leftOrRight == 0)
					{
						comparisonNode->Right->Parent = comparisonNode->Parent;
						comparisonNode->Parent->Left = comparisonNode->Right;
						binaryTree->Size -= 1;
						return 0;
					}
					if (leftOrRight == 1)
					{
						comparisonNode->Right->Parent = comparisonNode->Parent;
						comparisonNode->Parent->Right = comparisonNode->Right;
						binaryTree->Size -= 1;
						return 0;
					}
				}
				//Если ребёнок слева
				if ((comparisonNode->Left != nullptr) && (comparisonNode->Right == nullptr))
				{
					if (leftOrRight == 0)
					{
						comparisonNode->Left->Parent = comparisonNode->Parent;
						comparisonNode->Parent->Left = comparisonNode->Left;
						binaryTree->Size -= 1;
						return 0;
					}
					if (leftOrRight == 1)
					{
						comparisonNode->Left->Parent = comparisonNode->Parent;
						comparisonNode->Parent->Right = comparisonNode->Left;
						binaryTree->Size -= 1;
						return 0;
					}
				}
				//Многодетный узел
				if ((comparisonNode->Left != nullptr) && (comparisonNode->Right != nullptr))
				{
					BinaryTree* newBinaryTree = new BinaryTree;
					newBinaryTree->Root = comparisonNode->Right;
					if (leftOrRight == 0)
					{
						comparisonNode->Parent->Left->Data = FindMinimum(newBinaryTree, 1);
						binaryTree->Size -= 1;
						return 0;
					}
					if (leftOrRight == 1)
					{
						comparisonNode->Parent->Right->Data = FindMinimum(newBinaryTree, 1);
						binaryTree->Size -= 1;
						return 0;
					}					
				}
			}
		}
		//Смещение
		if (comparisonNode->Data > element)
		{
			leftOrRight = 0;
			comparisonNode = comparisonNode->Left;
		}
		if (comparisonNode->Data < element)
		{
			leftOrRight = 1;
			comparisonNode = comparisonNode->Right;
		}
	}
	return 1;
}


int FindElement(BinaryTree* binaryTree, int element)
{
	BinaryTreeNode* comparisonNode = new BinaryTreeNode();
	comparisonNode = binaryTree->Root;

	while (comparisonNode != nullptr)
	{
		if (comparisonNode->Data == element)
		{
			return 0;
		}
		if (element < comparisonNode->Data)
		{
			comparisonNode = comparisonNode->Left;
		}
		else
		{
			comparisonNode = comparisonNode->Right;
		}
	}
	return 1;
}


int FindMinimum(BinaryTree* binaryTree, int operation)
{
	//0-поиск
	//1-поиск с удалением
	BinaryTreeNode* comparisonNode = new BinaryTreeNode();
	comparisonNode = binaryTree->Root;
	while (comparisonNode->Left != nullptr)
	{
		comparisonNode = comparisonNode->Left;
	}
	if (operation == 0)
	{
		return comparisonNode->Data;
	}
	else
	{
		int hranilka;
		hranilka = comparisonNode->Data;
		if (comparisonNode->Right == nullptr)
		{
			comparisonNode->Parent->Left = nullptr;
		}
		else
		{
			comparisonNode->Right->Parent = comparisonNode->Parent;
			comparisonNode->Parent->Left = comparisonNode->Right;
		}
		return hranilka;
	}
}


int FindMaximum(BinaryTree* binaryTree)
{
	BinaryTreeNode* comparisonNode = new BinaryTreeNode();
	comparisonNode = binaryTree->Root;

	while (comparisonNode->Right != nullptr)
	{
		comparisonNode = comparisonNode->Right;
	}

	int hranilka;
	hranilka = comparisonNode->Data;
	comparisonNode->Parent->Left = nullptr;
	return hranilka;
}
